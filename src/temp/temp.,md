// Used by client to represent the server to hide socket code
class ServerRepresentation {
    constructor(socketToServer) {
        // upgrade socket
    }
    register(data) {
        // return await socket.emit(register, data)
    }
    setName(data) {
        // return await socket.emit(setName, data)
    }
    getUserList() {
        // return await socket.emit(getUserList)
    }
}

// derived object used by server:
class ServerSocketHandler {
    constructor(socketToOneClient) {
        // upgrade socket
        socket.on('register', (data, respond) => this.register(data, respond))
        socket.on('setName', (data, respond) => this.setName(data, respond))
        socket.on('getUserList', (data, respond) => this.getUserList(data, respond))
    }
    register(data, respond) {
        // data = process registration
        respond(data)
    }
    setName(data, respond) {
        // data = process name change
        respond(data)
    }
    getUserList(data, respond) {
        // data = get user list information
        respond(data);
    }
}



// =========================================================================================



// Used by server to represent the client to hide socket code
class ClientRepresentation {
    constructor(socketToClient) {
        // upgrade socket
    }
    userJoined(user) {
        // client.emit
    }
    userLeft(user) {
        // client.emit
    }
    getStateDigest() {
        // return await client.emit(get-state-digest)
    }
}


// derived object used by server:
class ClientSocketHandler {
    constructor(socketToServer) {
        socket = socketToServer
        socket.on('userJoined', (data, respond) => this.userJoined(data, respond))
        socket.on('userLeft', (data, respond) => this.userLeft(data, respond))
        socket.on('getStateDigest', (data, respond) => this.getStateDigest(data, respond))
    }
    userJoined(user, _) {
        // process user-join
    }
    userLeft(user, _) {
        // process user-leave
    }
    getStateDigest(_, respond) {
        // data = derive local state digest
        respond(data);
    }
}

